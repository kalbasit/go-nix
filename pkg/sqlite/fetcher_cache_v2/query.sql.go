// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package fetcher_cache_v2

import (
	"context"
)

const queryCache = `-- name: QueryCache :one
select value, timestamp from Cache where domain = ? and key = ?
`

type QueryCacheParams struct {
	Domain string
	Key    string
}

type QueryCacheRow struct {
	Value     string
	Timestamp int64
}

func (q *Queries) QueryCache(ctx context.Context, arg QueryCacheParams) (QueryCacheRow, error) {
	row := q.db.QueryRowContext(ctx, queryCache, arg.Domain, arg.Key)
	var i QueryCacheRow
	err := row.Scan(&i.Value, &i.Timestamp)
	return i, err
}

const upsertCache = `-- name: UpsertCache :exec
insert or replace into Cache(domain, key, value, timestamp) values (?, ?, ?, ?)
`

type UpsertCacheParams struct {
	Domain    string
	Key       string
	Value     string
	Timestamp int64
}

func (q *Queries) UpsertCache(ctx context.Context, arg UpsertCacheParams) error {
	_, err := q.db.ExecContext(ctx, upsertCache,
		arg.Domain,
		arg.Key,
		arg.Value,
		arg.Timestamp,
	)
	return err
}
